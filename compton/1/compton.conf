
#
# ~/.config/compton.conf
#
# See: https://github.com/chjj/compton/blob/master/man/compton.1.asciidoc
#

#################################
#
# Backend
#
#################################

# Specify the backend to use: xrender or glx. GLX (OpenGL) backend generally has much superior
# performance as far as you have a graphic card/chip and driver.
backend = "xrender";

#################################
#
# X Render backend
#
#################################

# Step for pregenerating alpha pictures. (0.01 - 1.0, defaults to 0.03)
alpha-step = 0.06;

#################################
#
# GLX backend
#
#################################

# Avoid using stencil buffer, useful if you donâ€™t have a stencil buffer. Might cause incorrect
# opacity when rendering transparent content (but never practically happened) and may not work with
# --blur-background. My tests show a 15% performance boost. Recommended.
glx-no-stencil = true;

# Copy unmodified regions from front buffer instead of redrawing them all. My tests with
# nvidia-drivers show a 10% decrease in performance when the whole screen is modified, but a 20%
# increase when only 1/4 is. My tests on nouveau show terrible slowdown. Useful with
# --glx-swap-method, as well.
glx-copy-from-front = false;

# Use MESA_copy_sub_buffer to do partial screen update. My tests on nouveau shows a 200% performance
# boost when only 1/4 of the screen is updated. May break VSync and is not available on some
# drivers. Overrides --glx-copy-from-front.
#glx-use-copysubbuffermesa = true;

# Avoid rebinding pixmap on window damage. Probably could improve performance on rapid window
# content changes, but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
glx-no-rebind-pixmap = false;

# GLX buffer swap method we assume. Could be undefined (0), copy (1), exchange (2), 3-6, or
# buffer-age (-1). undefined is the slowest and the safest, and the default value. copy is fastest,
# but may fail on some drivers, 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3. buffer-age means auto-detect using
# GLX_EXT_buffer_age, supported by some drivers. Useless with --glx-use-copysubbuffermesa. Partially
# breaks --resize-damage. Defaults to undefined.
glx-swap-method = "undefined";

# Use GL_EXT_gpu_shader4 for some optimization on blur GLSL code. My tests on GTX 670 show no
# noticeable effect.
#glx-use-gpushader4 = true;

# Attempt to synchronize client applications' draw calls with XSync(), used on GLX backend to ensure
# up-to-date window content is painted.
xrender-sync = true;

# Additionally use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX
# backend for some users. May be disabled at compile time with NO_XSYNC=1.
xrender-sync-fence = true;

#################################
#
# Shadows
#
#################################

# Enabled client-side shadows on windows. Note desktop windows (windows with
# _NET_WM_WINDOW_TYPE_DESKTOP) never get shadow.
shadow = true;

# Don't draw shadows on drag-and-drop windows.
no-dnd-shadow = true;

# Avoid drawing shadows on dock/panel windows
no-dock-shadow = true;

# Zero the part of the shadow's mask behind the window. Note this may not work properly on ARGB
# windows with fully transparent areas.
clear-shadow = false;

# The blur radius for shadows. (default 12)
shadow-radius = 7;

# The left offset for shadows. (default -15)
shadow-offset-x = -7;

# The top offset for shadows. (default -15)
shadow-offset-y = -7;

# The translucency for shadows. (default .75)
shadow-opacity = 0.4;

# Red color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-red = 0.0;

# Green color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-green = 0.0;

# Blue color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws
# its shadows, certain applications will have visual glitches (most applications are fine, only apps
# that do weird things with xshapes or argb are affected). This list includes all the affected apps
# I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this
# prevents a visual glitch with the XFWM alt tab switcher.
# Use: xwininfo -stats -wm , or xprop , or obxprop
shadow-exclude = [
#	"! name~=''",
	"name = 'Notification'",
	"name = 'Plank'",
	"name = 'Docky'",
	"name = 'Kupfer'",
#	"name *= 'compton'", 
	"class_g = 'Conky'",
	"class_g = 'Kupfer'",
	"class_g = 'Synapse'",
	"class_g ?= 'Cairo-dock'",
	"class_i *= 'cdesktop'",
	"_GTK_FRAME_EXTENTS@:c"
];

# Specify an X geometry that describes the region in which shadow should not be painted in, such as
# a dock window region.  For example, if the 10 pixels on the bottom of the screen should not have
# shadows painted on, use the following:
# shadow-exclude-reg = "x10+0+0";

# Crop shadow of a window fully on a particular Xinerama screen to the screen.
# xinerama-shadow-crop = true;

#################################
#
# Opacity
#
#################################

# Default opacity for dropdown menus and popup menus. (0.0 - 1.0, defaults to 1.0)
menu-opacity = 1.0;

# Opacity of inactive windows. (0.1 - 1.0, disabled by default)
inactive-opacity = 1.0;

# Let "inactive opacity" to override the windows' '_NET_WM_OPACITY' values.
inactive-opacity-override = false;

# Default opacity for active windows. (0.0 - 1.0)
active-opacity = 1.0;

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
frame-opacity = 1.0;

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
inactive-dim = 0.0;

# Use fixed inactive dim value, instead of adjusting according to window opacity.
inactive-dim-fixed = true;

# Specify the blur convolution kernel, with the following format:
#  WIDTH,HEIGHT,ELE1,ELE2,ELE3,ELE4,ELE5...
# The element in the center must not be included, it will be forever 1.0 or changing based on
# opacity, depending on whether you have '--blur-background-fixed'. Yet the automatic adjustment of
# blur factor may not work well with a custom blur kernel. May be one of the predefined kernels:
# '3x3box' (default), '5x5box', '7x7box', '3x3gaussian', '5x5gaussian', '7x7gaussian',
# '9x9gaussian', '11x11gaussian'. All Gaussian kernels are generated with sigma = 0.84089642 . You
# may use the accompanied 'compton-convgen.py' to generate blur kernels.
blur-kern = "3x3box"

# Use fixed blur strength rather than adjusting according to window opacity.
blur-background-fixed = false;

# Blur background of semi-transparent / ARGB windows. Bad in performance, with driver-dependent
# behavior. The name of the switch may change without prior notifications.
blur-background = false;

# Blur background of windows when the window frame is not opaque. Implies *--blur-background*. Bad
# in performance, with driver-dependent behavior. The name may change.
blur-background-frame = false;

# Exclude conditions for background blur.
blur-background-exclude = [
"window_type = 'dock'",
"window_type = 'desktop'",
"_GTK_FRAME_EXTENTS@:c"
];

# Resize damaged region by a specific number of pixels. A positive value enlarges it while a
# negative one shrinks it. If the value is positive, those additional pixels will not be actually
# painted to screen, only used in blur calculation, and such. (Due to technical limitations,
# with *--dbe* or *--glx-swap-method*, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur, in which case you should use the blur
# radius value here (e.g. with a 3x3 kernel, you should use *--resize-damage* 1, with a 5x5 one you
# use *--resize-damage* 2, and so on). May or may not work with '--glx-no-stencil'. Shrinking
# doesn't function correctly.
#resize-damage = 1;

# Specify a list of opacity rules, in the format 'PERCENT:PATTERN', like '50:name *= "Firefox"'.
# compton-trans is recommended over this. Note we do not distinguish 100% and unset, and we don't
# make any guarantee about possible conflicts with other programs that set '_NET_WM_WINDOW_OPACITY'
# on frame or client windows.
# opacity-rule = [ "80:class_g = 'URxvt'" ];

#################################
#
# Fading
#
#################################

# Fade windows in/out when opening/closing and when opacity changes, unless *--no-fading-openclose*
# is used.
fading = true;

# Do not fade on window open/close
no-fading-openclose = false;

# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 10;

# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.03;

# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.03;

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
no-fading-destroyed-argb = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];

#################################
#
# Other
#
#################################

# Try to detect WM windows (a non-override-redirect window with no child that has 'WM_STATE') and
# mark them as active.
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
# (e.g. menus).
mark-ovredir-focused = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window, rather than listening to
# 'FocusIn'/'FocusOut' event. Might have more accuracy, provided that the WM supports it.
use-ewmh-active-win = true;

# Try to detect windows with rounded corners and don't consider them shaped windows. The accuracy
# is not very high, unfortunately.
detect-rounded-corners = true;

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers not passing
# '_NET_WM_OPACITY' of client windows to frame windows.
detect-client-opacity = true;

# Specify refresh rate of the screen. If not specified or 0, compton will try detecting this with
# X RandR extension.
refresh-rate = 0;

# Set VSync method. VSync methods currently available:
#  'none': No VSync
#  'drm': VSync with 'DRM_IOCTL_WAIT_VBLANK'. May only work on some (DRI-based) drivers.
#  'opengl': Try to VSync with 'SGI_video_sync' OpenGL extension. Only work on some drivers.
#  'opengl-oml': Try to VSync with 'OML_sync_control' OpenGL extension. Only work on some drivers.
#  'opengl-swc': Try to VSync with 'SGI_swap_control' OpenGL extension. Only work on some drivers.
#                Works only with GLX backend. Known to be most effective on many drivers. Does not
#                guarantee to control paint timing.
#  'opengl-mswc': Try to VSync with 'MESA_swap_control' OpenGL extension. Basically the same as
#                 'opengl-swc' above, except the extension we use.
#
# (Note some VSync methods may not be enabled at compile time.)
vsync = "none";


# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing. Reported to
# have no effect, though.
dbe = false;

# Painting on X Composite overlay window instead of on root window.
paint-on-overlay = true;

# Limit compton to repaint at most once every 1 / 'refresh_rate' second to boost performance. This
# should not be used with *--vsync* drm/opengl/opengl-oml as they essentially does *--sw-opti*'s job
# already, unless you wish to specify a lower refresh rate than the actual value.
sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for
# full-screen windows. Known to cause flickering when redirecting/unredirecting windows.
# *--paint-on-overlay* may make the flickering less obvious.
unredir-if-possible = false;

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
unredir-if-possible-delay = 0;

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
unredir-if-possible-exclude = [ ];

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ "class_g = 'Cairo-clock'" ];

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows in the same group focused at the
# same time.
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same group focused at the
# same time. 'WM_TRANSIENT_FOR' has higher priority if *--detect-transient* is enabled, too.
detect-client-leader = true;

# Specify a list of conditions of windows that should be painted with inverted color.
# Resource-hogging, and is not well tested.
invert-color-include = [ ];

#################################
#
# Window type settings
#
#################################

# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#  "unknown", "desktop", "dock", "toolbar", "menu", "utility", "splash", "dialog", "normal",
#  "dropdown_menu", "popup_menu", "tooltip", "notify", "combo", and "dnd".
# Options:
#  "fade" controls window-type-specific fade settings.
#  "shadow" controls window-type-specific shadow settings.
#  "opacity" controls default opacity of the window type.
#  "focus"  controls whether the window of this type is to be always considered focused. (By
#            default, all window types except "normal" and "dialog" has this on.)
wintypes:
{
	tooltip =
	{
        fade = true;
        shadow = true;
        opacity = 1;
        focus = true;
	};
};
